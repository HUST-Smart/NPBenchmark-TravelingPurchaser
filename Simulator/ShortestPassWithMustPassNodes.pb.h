// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ShortestPassWithMustPassNodes.proto

#ifndef PROTOBUF_INCLUDED_ShortestPassWithMustPassNodes_2eproto
#define PROTOBUF_INCLUDED_ShortestPassWithMustPassNodes_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ShortestPassWithMustPassNodes_2eproto 

namespace protobuf_ShortestPassWithMustPassNodes_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ShortestPassWithMustPassNodes_2eproto
namespace pb {
class ShortestPassWithMustPassNodes;
class ShortestPassWithMustPassNodesDefaultTypeInternal;
extern ShortestPassWithMustPassNodesDefaultTypeInternal _ShortestPassWithMustPassNodes_default_instance_;
class ShortestPassWithMustPassNodes_Edge;
class ShortestPassWithMustPassNodes_EdgeDefaultTypeInternal;
extern ShortestPassWithMustPassNodes_EdgeDefaultTypeInternal _ShortestPassWithMustPassNodes_Edge_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::ShortestPassWithMustPassNodes* Arena::CreateMaybeMessage<::pb::ShortestPassWithMustPassNodes>(Arena*);
template<> ::pb::ShortestPassWithMustPassNodes_Edge* Arena::CreateMaybeMessage<::pb::ShortestPassWithMustPassNodes_Edge>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

// ===================================================================

class ShortestPassWithMustPassNodes_Edge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ShortestPassWithMustPassNodes.Edge) */ {
 public:
  ShortestPassWithMustPassNodes_Edge();
  virtual ~ShortestPassWithMustPassNodes_Edge();

  ShortestPassWithMustPassNodes_Edge(const ShortestPassWithMustPassNodes_Edge& from);

  inline ShortestPassWithMustPassNodes_Edge& operator=(const ShortestPassWithMustPassNodes_Edge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShortestPassWithMustPassNodes_Edge(ShortestPassWithMustPassNodes_Edge&& from) noexcept
    : ShortestPassWithMustPassNodes_Edge() {
    *this = ::std::move(from);
  }

  inline ShortestPassWithMustPassNodes_Edge& operator=(ShortestPassWithMustPassNodes_Edge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShortestPassWithMustPassNodes_Edge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShortestPassWithMustPassNodes_Edge* internal_default_instance() {
    return reinterpret_cast<const ShortestPassWithMustPassNodes_Edge*>(
               &_ShortestPassWithMustPassNodes_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ShortestPassWithMustPassNodes_Edge* other);
  friend void swap(ShortestPassWithMustPassNodes_Edge& a, ShortestPassWithMustPassNodes_Edge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShortestPassWithMustPassNodes_Edge* New() const final {
    return CreateMaybeMessage<ShortestPassWithMustPassNodes_Edge>(NULL);
  }

  ShortestPassWithMustPassNodes_Edge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShortestPassWithMustPassNodes_Edge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShortestPassWithMustPassNodes_Edge& from);
  void MergeFrom(const ShortestPassWithMustPassNodes_Edge& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShortestPassWithMustPassNodes_Edge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 src = 2;
  void clear_src();
  static const int kSrcFieldNumber = 2;
  ::google::protobuf::int32 src() const;
  void set_src(::google::protobuf::int32 value);

  // int32 dst = 3;
  void clear_dst();
  static const int kDstFieldNumber = 3;
  ::google::protobuf::int32 dst() const;
  void set_dst(::google::protobuf::int32 value);

  // int32 cost = 4;
  void clear_cost();
  static const int kCostFieldNumber = 4;
  ::google::protobuf::int32 cost() const;
  void set_cost(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.ShortestPassWithMustPassNodes.Edge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 src_;
  ::google::protobuf::int32 dst_;
  ::google::protobuf::int32 cost_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ShortestPassWithMustPassNodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShortestPassWithMustPassNodes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ShortestPassWithMustPassNodes) */ {
 public:
  ShortestPassWithMustPassNodes();
  virtual ~ShortestPassWithMustPassNodes();

  ShortestPassWithMustPassNodes(const ShortestPassWithMustPassNodes& from);

  inline ShortestPassWithMustPassNodes& operator=(const ShortestPassWithMustPassNodes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShortestPassWithMustPassNodes(ShortestPassWithMustPassNodes&& from) noexcept
    : ShortestPassWithMustPassNodes() {
    *this = ::std::move(from);
  }

  inline ShortestPassWithMustPassNodes& operator=(ShortestPassWithMustPassNodes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShortestPassWithMustPassNodes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShortestPassWithMustPassNodes* internal_default_instance() {
    return reinterpret_cast<const ShortestPassWithMustPassNodes*>(
               &_ShortestPassWithMustPassNodes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ShortestPassWithMustPassNodes* other);
  friend void swap(ShortestPassWithMustPassNodes& a, ShortestPassWithMustPassNodes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShortestPassWithMustPassNodes* New() const final {
    return CreateMaybeMessage<ShortestPassWithMustPassNodes>(NULL);
  }

  ShortestPassWithMustPassNodes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShortestPassWithMustPassNodes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShortestPassWithMustPassNodes& from);
  void MergeFrom(const ShortestPassWithMustPassNodes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShortestPassWithMustPassNodes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ShortestPassWithMustPassNodes_Edge Edge;

  // accessors -------------------------------------------------------

  // repeated int32 MustPass = 4;
  int mustpass_size() const;
  void clear_mustpass();
  static const int kMustPassFieldNumber = 4;
  ::google::protobuf::int32 mustpass(int index) const;
  void set_mustpass(int index, ::google::protobuf::int32 value);
  void add_mustpass(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mustpass() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mustpass();

  // repeated .pb.ShortestPassWithMustPassNodes.Edge Edges = 5;
  int edges_size() const;
  void clear_edges();
  static const int kEdgesFieldNumber = 5;
  ::pb::ShortestPassWithMustPassNodes_Edge* mutable_edges(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::ShortestPassWithMustPassNodes_Edge >*
      mutable_edges();
  const ::pb::ShortestPassWithMustPassNodes_Edge& edges(int index) const;
  ::pb::ShortestPassWithMustPassNodes_Edge* add_edges();
  const ::google::protobuf::RepeatedPtrField< ::pb::ShortestPassWithMustPassNodes_Edge >&
      edges() const;

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 Source = 2;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  ::google::protobuf::int32 source() const;
  void set_source(::google::protobuf::int32 value);

  // int32 Target = 3;
  void clear_target();
  static const int kTargetFieldNumber = 3;
  ::google::protobuf::int32 target() const;
  void set_target(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.ShortestPassWithMustPassNodes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mustpass_;
  mutable int _mustpass_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::ShortestPassWithMustPassNodes_Edge > edges_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 source_;
  ::google::protobuf::int32 target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ShortestPassWithMustPassNodes_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ShortestPassWithMustPassNodes_Edge

// int32 id = 1;
inline void ShortestPassWithMustPassNodes_Edge::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ShortestPassWithMustPassNodes_Edge::id() const {
  // @@protoc_insertion_point(field_get:pb.ShortestPassWithMustPassNodes.Edge.id)
  return id_;
}
inline void ShortestPassWithMustPassNodes_Edge::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.ShortestPassWithMustPassNodes.Edge.id)
}

// int32 src = 2;
inline void ShortestPassWithMustPassNodes_Edge::clear_src() {
  src_ = 0;
}
inline ::google::protobuf::int32 ShortestPassWithMustPassNodes_Edge::src() const {
  // @@protoc_insertion_point(field_get:pb.ShortestPassWithMustPassNodes.Edge.src)
  return src_;
}
inline void ShortestPassWithMustPassNodes_Edge::set_src(::google::protobuf::int32 value) {
  
  src_ = value;
  // @@protoc_insertion_point(field_set:pb.ShortestPassWithMustPassNodes.Edge.src)
}

// int32 dst = 3;
inline void ShortestPassWithMustPassNodes_Edge::clear_dst() {
  dst_ = 0;
}
inline ::google::protobuf::int32 ShortestPassWithMustPassNodes_Edge::dst() const {
  // @@protoc_insertion_point(field_get:pb.ShortestPassWithMustPassNodes.Edge.dst)
  return dst_;
}
inline void ShortestPassWithMustPassNodes_Edge::set_dst(::google::protobuf::int32 value) {
  
  dst_ = value;
  // @@protoc_insertion_point(field_set:pb.ShortestPassWithMustPassNodes.Edge.dst)
}

// int32 cost = 4;
inline void ShortestPassWithMustPassNodes_Edge::clear_cost() {
  cost_ = 0;
}
inline ::google::protobuf::int32 ShortestPassWithMustPassNodes_Edge::cost() const {
  // @@protoc_insertion_point(field_get:pb.ShortestPassWithMustPassNodes.Edge.cost)
  return cost_;
}
inline void ShortestPassWithMustPassNodes_Edge::set_cost(::google::protobuf::int32 value) {
  
  cost_ = value;
  // @@protoc_insertion_point(field_set:pb.ShortestPassWithMustPassNodes.Edge.cost)
}

// -------------------------------------------------------------------

// ShortestPassWithMustPassNodes

// string Name = 1;
inline void ShortestPassWithMustPassNodes::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShortestPassWithMustPassNodes::name() const {
  // @@protoc_insertion_point(field_get:pb.ShortestPassWithMustPassNodes.Name)
  return name_.GetNoArena();
}
inline void ShortestPassWithMustPassNodes::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ShortestPassWithMustPassNodes.Name)
}
#if LANG_CXX11
inline void ShortestPassWithMustPassNodes::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ShortestPassWithMustPassNodes.Name)
}
#endif
inline void ShortestPassWithMustPassNodes::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ShortestPassWithMustPassNodes.Name)
}
inline void ShortestPassWithMustPassNodes::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ShortestPassWithMustPassNodes.Name)
}
inline ::std::string* ShortestPassWithMustPassNodes::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.ShortestPassWithMustPassNodes.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShortestPassWithMustPassNodes::release_name() {
  // @@protoc_insertion_point(field_release:pb.ShortestPassWithMustPassNodes.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShortestPassWithMustPassNodes::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.ShortestPassWithMustPassNodes.Name)
}

// int32 Source = 2;
inline void ShortestPassWithMustPassNodes::clear_source() {
  source_ = 0;
}
inline ::google::protobuf::int32 ShortestPassWithMustPassNodes::source() const {
  // @@protoc_insertion_point(field_get:pb.ShortestPassWithMustPassNodes.Source)
  return source_;
}
inline void ShortestPassWithMustPassNodes::set_source(::google::protobuf::int32 value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:pb.ShortestPassWithMustPassNodes.Source)
}

// int32 Target = 3;
inline void ShortestPassWithMustPassNodes::clear_target() {
  target_ = 0;
}
inline ::google::protobuf::int32 ShortestPassWithMustPassNodes::target() const {
  // @@protoc_insertion_point(field_get:pb.ShortestPassWithMustPassNodes.Target)
  return target_;
}
inline void ShortestPassWithMustPassNodes::set_target(::google::protobuf::int32 value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:pb.ShortestPassWithMustPassNodes.Target)
}

// repeated int32 MustPass = 4;
inline int ShortestPassWithMustPassNodes::mustpass_size() const {
  return mustpass_.size();
}
inline void ShortestPassWithMustPassNodes::clear_mustpass() {
  mustpass_.Clear();
}
inline ::google::protobuf::int32 ShortestPassWithMustPassNodes::mustpass(int index) const {
  // @@protoc_insertion_point(field_get:pb.ShortestPassWithMustPassNodes.MustPass)
  return mustpass_.Get(index);
}
inline void ShortestPassWithMustPassNodes::set_mustpass(int index, ::google::protobuf::int32 value) {
  mustpass_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.ShortestPassWithMustPassNodes.MustPass)
}
inline void ShortestPassWithMustPassNodes::add_mustpass(::google::protobuf::int32 value) {
  mustpass_.Add(value);
  // @@protoc_insertion_point(field_add:pb.ShortestPassWithMustPassNodes.MustPass)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ShortestPassWithMustPassNodes::mustpass() const {
  // @@protoc_insertion_point(field_list:pb.ShortestPassWithMustPassNodes.MustPass)
  return mustpass_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ShortestPassWithMustPassNodes::mutable_mustpass() {
  // @@protoc_insertion_point(field_mutable_list:pb.ShortestPassWithMustPassNodes.MustPass)
  return &mustpass_;
}

// repeated .pb.ShortestPassWithMustPassNodes.Edge Edges = 5;
inline int ShortestPassWithMustPassNodes::edges_size() const {
  return edges_.size();
}
inline void ShortestPassWithMustPassNodes::clear_edges() {
  edges_.Clear();
}
inline ::pb::ShortestPassWithMustPassNodes_Edge* ShortestPassWithMustPassNodes::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ShortestPassWithMustPassNodes.Edges)
  return edges_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::ShortestPassWithMustPassNodes_Edge >*
ShortestPassWithMustPassNodes::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:pb.ShortestPassWithMustPassNodes.Edges)
  return &edges_;
}
inline const ::pb::ShortestPassWithMustPassNodes_Edge& ShortestPassWithMustPassNodes::edges(int index) const {
  // @@protoc_insertion_point(field_get:pb.ShortestPassWithMustPassNodes.Edges)
  return edges_.Get(index);
}
inline ::pb::ShortestPassWithMustPassNodes_Edge* ShortestPassWithMustPassNodes::add_edges() {
  // @@protoc_insertion_point(field_add:pb.ShortestPassWithMustPassNodes.Edges)
  return edges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::ShortestPassWithMustPassNodes_Edge >&
ShortestPassWithMustPassNodes::edges() const {
  // @@protoc_insertion_point(field_list:pb.ShortestPassWithMustPassNodes.Edges)
  return edges_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ShortestPassWithMustPassNodes_2eproto
