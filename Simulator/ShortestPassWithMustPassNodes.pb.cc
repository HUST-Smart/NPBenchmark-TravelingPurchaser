// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ShortestPassWithMustPassNodes.proto

#include "ShortestPassWithMustPassNodes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_ShortestPassWithMustPassNodes_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ShortestPassWithMustPassNodes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ShortestPassWithMustPassNodes_Edge;
}  // namespace protobuf_ShortestPassWithMustPassNodes_2eproto
namespace pb {
class ShortestPassWithMustPassNodes_EdgeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShortestPassWithMustPassNodes_Edge>
      _instance;
} _ShortestPassWithMustPassNodes_Edge_default_instance_;
class ShortestPassWithMustPassNodesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShortestPassWithMustPassNodes>
      _instance;
} _ShortestPassWithMustPassNodes_default_instance_;
}  // namespace pb
namespace protobuf_ShortestPassWithMustPassNodes_2eproto {
static void InitDefaultsShortestPassWithMustPassNodes_Edge() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ShortestPassWithMustPassNodes_Edge_default_instance_;
    new (ptr) ::pb::ShortestPassWithMustPassNodes_Edge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ShortestPassWithMustPassNodes_Edge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ShortestPassWithMustPassNodes_Edge =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShortestPassWithMustPassNodes_Edge}, {}};

static void InitDefaultsShortestPassWithMustPassNodes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ShortestPassWithMustPassNodes_default_instance_;
    new (ptr) ::pb::ShortestPassWithMustPassNodes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ShortestPassWithMustPassNodes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ShortestPassWithMustPassNodes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsShortestPassWithMustPassNodes}, {
      &protobuf_ShortestPassWithMustPassNodes_2eproto::scc_info_ShortestPassWithMustPassNodes_Edge.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ShortestPassWithMustPassNodes_Edge.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ShortestPassWithMustPassNodes.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::ShortestPassWithMustPassNodes_Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::ShortestPassWithMustPassNodes_Edge, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::ShortestPassWithMustPassNodes_Edge, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::ShortestPassWithMustPassNodes_Edge, dst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::ShortestPassWithMustPassNodes_Edge, cost_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::ShortestPassWithMustPassNodes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::ShortestPassWithMustPassNodes, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::ShortestPassWithMustPassNodes, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::ShortestPassWithMustPassNodes, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::ShortestPassWithMustPassNodes, mustpass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::ShortestPassWithMustPassNodes, edges_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::ShortestPassWithMustPassNodes_Edge)},
  { 9, -1, sizeof(::pb::ShortestPassWithMustPassNodes)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_ShortestPassWithMustPassNodes_Edge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_ShortestPassWithMustPassNodes_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ShortestPassWithMustPassNodes.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n#ShortestPassWithMustPassNodes.proto\022\002p"
      "b\"\322\001\n\035ShortestPassWithMustPassNodes\022\014\n\004N"
      "ame\030\001 \001(\t\022\016\n\006Source\030\002 \001(\005\022\016\n\006Target\030\003 \001("
      "\005\022\020\n\010MustPass\030\004 \003(\005\0225\n\005Edges\030\005 \003(\0132&.pb."
      "ShortestPassWithMustPassNodes.Edge\032:\n\004Ed"
      "ge\022\n\n\002id\030\001 \001(\005\022\013\n\003src\030\002 \001(\005\022\013\n\003dst\030\003 \001(\005"
      "\022\014\n\004cost\030\004 \001(\005B#\n\002pbB\035ShortestPassWithMu"
      "stPassNodesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 299);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ShortestPassWithMustPassNodes.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ShortestPassWithMustPassNodes_2eproto
namespace pb {

// ===================================================================

void ShortestPassWithMustPassNodes_Edge::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShortestPassWithMustPassNodes_Edge::kIdFieldNumber;
const int ShortestPassWithMustPassNodes_Edge::kSrcFieldNumber;
const int ShortestPassWithMustPassNodes_Edge::kDstFieldNumber;
const int ShortestPassWithMustPassNodes_Edge::kCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShortestPassWithMustPassNodes_Edge::ShortestPassWithMustPassNodes_Edge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ShortestPassWithMustPassNodes_2eproto::scc_info_ShortestPassWithMustPassNodes_Edge.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ShortestPassWithMustPassNodes.Edge)
}
ShortestPassWithMustPassNodes_Edge::ShortestPassWithMustPassNodes_Edge(const ShortestPassWithMustPassNodes_Edge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&id_)) + sizeof(cost_));
  // @@protoc_insertion_point(copy_constructor:pb.ShortestPassWithMustPassNodes.Edge)
}

void ShortestPassWithMustPassNodes_Edge::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&id_)) + sizeof(cost_));
}

ShortestPassWithMustPassNodes_Edge::~ShortestPassWithMustPassNodes_Edge() {
  // @@protoc_insertion_point(destructor:pb.ShortestPassWithMustPassNodes.Edge)
  SharedDtor();
}

void ShortestPassWithMustPassNodes_Edge::SharedDtor() {
}

void ShortestPassWithMustPassNodes_Edge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ShortestPassWithMustPassNodes_Edge::descriptor() {
  ::protobuf_ShortestPassWithMustPassNodes_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ShortestPassWithMustPassNodes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShortestPassWithMustPassNodes_Edge& ShortestPassWithMustPassNodes_Edge::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ShortestPassWithMustPassNodes_2eproto::scc_info_ShortestPassWithMustPassNodes_Edge.base);
  return *internal_default_instance();
}


void ShortestPassWithMustPassNodes_Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ShortestPassWithMustPassNodes.Edge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&id_)) + sizeof(cost_));
  _internal_metadata_.Clear();
}

bool ShortestPassWithMustPassNodes_Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ShortestPassWithMustPassNodes.Edge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 src = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dst = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cost = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ShortestPassWithMustPassNodes.Edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ShortestPassWithMustPassNodes.Edge)
  return false;
#undef DO_
}

void ShortestPassWithMustPassNodes_Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ShortestPassWithMustPassNodes.Edge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 src = 2;
  if (this->src() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->src(), output);
  }

  // int32 dst = 3;
  if (this->dst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dst(), output);
  }

  // int32 cost = 4;
  if (this->cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cost(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ShortestPassWithMustPassNodes.Edge)
}

::google::protobuf::uint8* ShortestPassWithMustPassNodes_Edge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.ShortestPassWithMustPassNodes.Edge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 src = 2;
  if (this->src() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->src(), target);
  }

  // int32 dst = 3;
  if (this->dst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dst(), target);
  }

  // int32 cost = 4;
  if (this->cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cost(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ShortestPassWithMustPassNodes.Edge)
  return target;
}

size_t ShortestPassWithMustPassNodes_Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ShortestPassWithMustPassNodes.Edge)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 src = 2;
  if (this->src() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->src());
  }

  // int32 dst = 3;
  if (this->dst() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dst());
  }

  // int32 cost = 4;
  if (this->cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cost());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShortestPassWithMustPassNodes_Edge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ShortestPassWithMustPassNodes.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  const ShortestPassWithMustPassNodes_Edge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShortestPassWithMustPassNodes_Edge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ShortestPassWithMustPassNodes.Edge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ShortestPassWithMustPassNodes.Edge)
    MergeFrom(*source);
  }
}

void ShortestPassWithMustPassNodes_Edge::MergeFrom(const ShortestPassWithMustPassNodes_Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ShortestPassWithMustPassNodes.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.src() != 0) {
    set_src(from.src());
  }
  if (from.dst() != 0) {
    set_dst(from.dst());
  }
  if (from.cost() != 0) {
    set_cost(from.cost());
  }
}

void ShortestPassWithMustPassNodes_Edge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ShortestPassWithMustPassNodes.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShortestPassWithMustPassNodes_Edge::CopyFrom(const ShortestPassWithMustPassNodes_Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ShortestPassWithMustPassNodes.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShortestPassWithMustPassNodes_Edge::IsInitialized() const {
  return true;
}

void ShortestPassWithMustPassNodes_Edge::Swap(ShortestPassWithMustPassNodes_Edge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShortestPassWithMustPassNodes_Edge::InternalSwap(ShortestPassWithMustPassNodes_Edge* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(src_, other->src_);
  swap(dst_, other->dst_);
  swap(cost_, other->cost_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ShortestPassWithMustPassNodes_Edge::GetMetadata() const {
  protobuf_ShortestPassWithMustPassNodes_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ShortestPassWithMustPassNodes_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShortestPassWithMustPassNodes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShortestPassWithMustPassNodes::kNameFieldNumber;
const int ShortestPassWithMustPassNodes::kSourceFieldNumber;
const int ShortestPassWithMustPassNodes::kTargetFieldNumber;
const int ShortestPassWithMustPassNodes::kMustPassFieldNumber;
const int ShortestPassWithMustPassNodes::kEdgesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShortestPassWithMustPassNodes::ShortestPassWithMustPassNodes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ShortestPassWithMustPassNodes_2eproto::scc_info_ShortestPassWithMustPassNodes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ShortestPassWithMustPassNodes)
}
ShortestPassWithMustPassNodes::ShortestPassWithMustPassNodes(const ShortestPassWithMustPassNodes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mustpass_(from.mustpass_),
      edges_(from.edges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&source_)) + sizeof(target_));
  // @@protoc_insertion_point(copy_constructor:pb.ShortestPassWithMustPassNodes)
}

void ShortestPassWithMustPassNodes::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_) -
      reinterpret_cast<char*>(&source_)) + sizeof(target_));
}

ShortestPassWithMustPassNodes::~ShortestPassWithMustPassNodes() {
  // @@protoc_insertion_point(destructor:pb.ShortestPassWithMustPassNodes)
  SharedDtor();
}

void ShortestPassWithMustPassNodes::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShortestPassWithMustPassNodes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ShortestPassWithMustPassNodes::descriptor() {
  ::protobuf_ShortestPassWithMustPassNodes_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ShortestPassWithMustPassNodes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShortestPassWithMustPassNodes& ShortestPassWithMustPassNodes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ShortestPassWithMustPassNodes_2eproto::scc_info_ShortestPassWithMustPassNodes.base);
  return *internal_default_instance();
}


void ShortestPassWithMustPassNodes::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ShortestPassWithMustPassNodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mustpass_.Clear();
  edges_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_) -
      reinterpret_cast<char*>(&source_)) + sizeof(target_));
  _internal_metadata_.Clear();
}

bool ShortestPassWithMustPassNodes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ShortestPassWithMustPassNodes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.ShortestPassWithMustPassNodes.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Target = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 MustPass = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mustpass())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_mustpass())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.ShortestPassWithMustPassNodes.Edge Edges = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_edges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ShortestPassWithMustPassNodes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ShortestPassWithMustPassNodes)
  return false;
#undef DO_
}

void ShortestPassWithMustPassNodes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ShortestPassWithMustPassNodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ShortestPassWithMustPassNodes.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 Source = 2;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->source(), output);
  }

  // int32 Target = 3;
  if (this->target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target(), output);
  }

  // repeated int32 MustPass = 4;
  if (this->mustpass_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _mustpass_cached_byte_size_));
  }
  for (int i = 0, n = this->mustpass_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->mustpass(i), output);
  }

  // repeated .pb.ShortestPassWithMustPassNodes.Edge Edges = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edges_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->edges(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ShortestPassWithMustPassNodes)
}

::google::protobuf::uint8* ShortestPassWithMustPassNodes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.ShortestPassWithMustPassNodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ShortestPassWithMustPassNodes.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 Source = 2;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->source(), target);
  }

  // int32 Target = 3;
  if (this->target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target(), target);
  }

  // repeated int32 MustPass = 4;
  if (this->mustpass_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _mustpass_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->mustpass_, target);
  }

  // repeated .pb.ShortestPassWithMustPassNodes.Edge Edges = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edges_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->edges(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ShortestPassWithMustPassNodes)
  return target;
}

size_t ShortestPassWithMustPassNodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ShortestPassWithMustPassNodes)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 MustPass = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->mustpass_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mustpass_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .pb.ShortestPassWithMustPassNodes.Edge Edges = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->edges_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->edges(static_cast<int>(i)));
    }
  }

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 Source = 2;
  if (this->source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  // int32 Target = 3;
  if (this->target() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShortestPassWithMustPassNodes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ShortestPassWithMustPassNodes)
  GOOGLE_DCHECK_NE(&from, this);
  const ShortestPassWithMustPassNodes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShortestPassWithMustPassNodes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ShortestPassWithMustPassNodes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ShortestPassWithMustPassNodes)
    MergeFrom(*source);
  }
}

void ShortestPassWithMustPassNodes::MergeFrom(const ShortestPassWithMustPassNodes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ShortestPassWithMustPassNodes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mustpass_.MergeFrom(from.mustpass_);
  edges_.MergeFrom(from.edges_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
  if (from.target() != 0) {
    set_target(from.target());
  }
}

void ShortestPassWithMustPassNodes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ShortestPassWithMustPassNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShortestPassWithMustPassNodes::CopyFrom(const ShortestPassWithMustPassNodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ShortestPassWithMustPassNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShortestPassWithMustPassNodes::IsInitialized() const {
  return true;
}

void ShortestPassWithMustPassNodes::Swap(ShortestPassWithMustPassNodes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShortestPassWithMustPassNodes::InternalSwap(ShortestPassWithMustPassNodes* other) {
  using std::swap;
  mustpass_.InternalSwap(&other->mustpass_);
  CastToBase(&edges_)->InternalSwap(CastToBase(&other->edges_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_, other->source_);
  swap(target_, other->target_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ShortestPassWithMustPassNodes::GetMetadata() const {
  protobuf_ShortestPassWithMustPassNodes_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ShortestPassWithMustPassNodes_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::ShortestPassWithMustPassNodes_Edge* Arena::CreateMaybeMessage< ::pb::ShortestPassWithMustPassNodes_Edge >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ShortestPassWithMustPassNodes_Edge >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::ShortestPassWithMustPassNodes* Arena::CreateMaybeMessage< ::pb::ShortestPassWithMustPassNodes >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ShortestPassWithMustPassNodes >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
